% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calibrate_lambda_for_penalized_models.R
\name{calibrate_lambda_max}
\alias{calibrate_lambda_max}
\title{calibrate_lambda_max}
\usage{
calibrate_lambda_max(
  function_to_run,
  var_to_check = "betas_hat",
  lambda_start = 5,
  lambda_inf = 1e-20,
  n_min_var = 0,
  factor = 2
)
}
\arguments{
\item{function_to_run}{Function that needs to be cross-validated. It needs to
have a have just one parameter to change (theoretically called lambda),
changing which the number of selected variables might change.}

\item{var_to_check}{Name of the variable (a vector) to check if, reducing
lambda, the number of its elements increases.}

\item{lambda_start}{Starting value of lambda. If left big might take longer
(default is 5)}

\item{n_min_var}{Minimum number of variables at which the process stops}

\item{factor}{Number to multiply or divide the considered lambda in the
step. The higher, the slower to find the optimal value. Default is 2.}

\item{lambda_min}{Minimum value of lambda to try (default is 0.1)}
}
\value{
The first encountered value of the parameter (lambda inside the
function) at which the number of elements of var_to_check is greater then 0.
}
\description{
Function to calibrate the starting value of lambda to make
cross-validation more effective. In particular, this function aim to solve
the problem that every model has its own "best" range of lambdas at which
the parameters are different from 0 and performs better. The function stops
where the number of elements of var_to_check is greater then 0.
}
\examples{
library(pye)
cols <- 2000
cols_cov <- 20
seed=1
simMicroarrayData_cov02_dim50_covariates <- create_sample_with_covariates(
		rows_train=50, cols=cols, cols_cov=cols_cov, covar=0.2, seed=seed)
df <- simMicroarrayData_cov02_dim50_covariates$train_df_scaled
#create the wrapper
penalty <- "L1"
wrapper <- function(lambda){
   return(pye_KS_estimation(df=df, penalty=penalty, trace=2, lambda=lambda,
   c_zero_fixed=FALSE, max_iter=5))
}
#find the lambda max
var_to_check <- paste0("betas_hat_", penalty)
lambda_max <- calibrate_lambda_max (function_to_run=wrapper,
               var_to_check=var_to_check, lambda_start = 5, lambda_min=0.1)
print(lambda_max)

}
