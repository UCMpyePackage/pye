% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cPYE_simulation_study.R
\name{cPYE_simulation_study_real_data}
\alias{cPYE_simulation_study_real_data}
\title{cPYE_simulation_study_real_data}
\usage{
cPYE_simulation_study_real_data(
  n = 1000,
  df,
  X = names(df[, !(names(df) \%in\% c(y, C))]),
  y = "y",
  C,
  lambda,
  tau,
  beta_start_input = NULL,
  beta_start_default = "zeros",
  gamma_start_input = NULL,
  gamma_start_default = "zeros",
  trace = 1,
  alpha,
  a1 = 3.7,
  a2 = 3,
  penalty = "L1",
  regressors_betas = NULL,
  regressors_gammas = NULL,
  used_cores = 1,
  scaling = FALSE,
  max_iter = 10000,
  trend = "monotone",
  delta = 1e-05,
  max_alpha = 10000,
  stepsizeShrink = 0.8,
  min_alpha = 1e-10,
  convergence_error = 1e-07,
  kernel = "gaussian",
  run_aauc = FALSE
)
}
\arguments{
\item{n}{number of esperiments. Default is 1000}

\item{df}{the input dataset}

\item{X}{regressors to consider in the estimation. It can be of type
dataframe, containing also the same name of the regressors included in df,
of just a vector of character. Default is all not present in y and C}

\item{y}{the target variable. It can be only binomial 0,1. It can be of type
dataframe, containing also the same name of the same target variable included
in df, or just a character. Default is "y".}

\item{C}{covariate variables. It can be of type dataframe, containing the
same covariates included in df, or just a vector of character. Default is NULL}

\item{lambda}{the penalization parameter of the regressors X}

\item{tau}{the penalization parameter of the covariates C}

\item{beta_start_input}{vector of a specific starting point for betas.
Default is NULL, i.e. no input vector}

\item{beta_start_default}{set the default starting point of betas. If
"zeros", it starts with a vector of all zeros, if "corr" it starts with the
value of the correlation of every regressor with the target variable y.
Default is "zeros"}

\item{gamma_start_input}{vector of a specific starting point for gammas.
Default is NULL, i.e. no input vector}

\item{gamma_start_default}{set the default starting point of gamma.
If "zeros", it starts with all zero values, if "corr" it starts with the
value of the correlation of every regressor with the target variable. Default
is "zeros"}

\item{trace}{2:visualize all the steps, 1:visualize just the result,
0:visualize nothing. Default is 1}

\item{alpha}{parameter for the Elastic-Net penalization term. Default is 0.5}

\item{a1}{parameter for the SCAD and MCP penalization term. Default is 3.7}

\item{a2}{parameter for the MCP penalization term. Default is 3.0}

\item{penalty}{the considered penalty. To be chosen among L12, L1, EN, SCAD
and MCP. Default is "L1"}

\item{regressors_betas}{a vector containing the real betas (if known). Default
is NULL, i.e. we do not know the real regressors}

\item{regressors_gammas}{a vector containing the real gammas (if known).
Default is NULL}

\item{used_cores}{number of core used for the parallelization of the
process. if equal to 1, then no parallelization is adopted. Default is 1.}

\item{scaling}{if TRUE, the dataset is scaled. FALSE otherwise, Default is
FALSE.}

\item{max_iter}{maximum number of iterations in the algorithms mmAPG and
mnmAPG. Default is 500}

\item{trend}{if "monotone", mmAPG is used, if "nonmonotone", mnmAPG is used.
Default is "monotone"}

\item{delta}{parameter for the convergence condition of the optimization
algorithm. Default is 1e-5}

\item{max_alpha}{maximum value of the step-parameter alpha. Default is 1000}

\item{stepsizeShrink}{parameter to adjust the step-size in the backtracking
line-search, in the optimization of pye. Taking values between 0 and 1,
the closer to 1, the more accurate the estimation will be, the longer it
will take and viceversa. Default is 0.8}

\item{min_alpha}{minimum value of the step-parameter alpha. Default is 1e-12}

\item{convergence_error}{error to accept for considering the algorithm
converged. Default is 1e-5}

\item{kernel}{the kernel type to use for the estimation of the density
function (tested only for "gaussian").  Default is "gaussian"}

\item{run_aauc}{if FALSE the aAUC and aYI are not computed, to save stimation
time if not requested. Default is FALSE}
}
\value{
a list containing the classification measure related to every simulation.
}
\description{
function to perform the simulation on n different 
experiments, splitting the dataset randomly in train and test,
estimating cPYE in the train and evaluating the classification
measures on the test set.
}
\examples{
library(pye)
cols <- 2000
cols_cov <- 20
seed=1
simMicroarrayData_cov02_dim50_covariates <- create_sample_with_covariates(
		rows_train=50, cols=cols, cols_cov=cols_cov, covar=0.2, seed=seed)
df <- simMicroarrayData_cov02_dim50_covariates$train_df_scaled
X <- simMicroarrayData_cov02_dim50_covariates$X
y <- simMicroarrayData_cov02_dim50_covariates$y
C <- simMicroarrayData_cov02_dim50_covariates$C
regressors_betas<-simMicroarrayData_cov02_dim50_covariates$nregressors
regressors_gammas<-simMicroarrayData_cov02_dim50_covariates$ncovariates
pye_starting_point <- "zeros" #c("zeros", "corr")
alpha <- 0.5
used_cores <- 1
used_penalty_cPYE <- c("L1") #c("L12", "L1", "EN", "SCAD", "MCP")
measures_cPYE <- c("ccr") #c("auc", "aauc", "aYI", "ccr", "yi", "gm", "pye")
n <- 5 #number of simulations
trend <- "monotone" #or "nonmonotone"
max_iter <- 10

cat("This simulation is on with algorithm: ", trend, "\n")

#--------------------------------------------------------------------------
#                                  START                                  |
#--------------------------------------------------------------------------
#pye Gaussian Kernel Smooth + covYI
for (p in used_penalty_cPYE){
  for (mm in 1:length(measures_cPYE)){
    cat("---> Starting with measure", measures_cPYE[mm], ", 
		for the penalty", p, "<---\n")
    name <- paste0("cPYE_KS_", p ,"_sim_study_", measures_cPYE[mm])
    lambda_to_use <- 0.1
    tau_to_use <- 0.05
    assign(name, cPYE_simulation_study_real_data(n=n, df=df, X=X, y=y, C=C, 
                             lambda=lambda_to_use, 
                             tau=tau_to_use, 
                             trend=trend,
                             beta_start_default=pye_starting_point, 
							gamma_start_default=pye_starting_point, 
                             trace=1,
                             alpha=alpha,
                             a1=3.7, a2=3.7,
                             penalty=p,
							max_iter=max_iter,
                             kernel="gaussian", used_cores=used_cores))
  }
} 
cat("Computation finished! Start saving data.")
print(name)

}
