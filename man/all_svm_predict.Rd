% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/penalizedSVM_with_covariates.R
\name{all_svm_predict}
\alias{all_svm_predict}
\title{all_svm_predict}
\usage{
all_svm_predict(
  df,
  X = names(df[, !(names(df) == y)]),
  y = "y",
  model_to_use,
  fold = NULL,
  regressors_betas = NULL,
  trace = 1,
  c_function_of_covariates = FALSE
)
}
\arguments{
\item{df}{the input dataset}

\item{X}{regressors to consider in the estimation. It can be of type
dataframe, containing also the same name of the regressors included in df,
of just a vector of character. Default is all not present in y}

\item{y}{the target variable. It can be only binomial 0,1. It can be of type
dataframe, containing also the same name of the same target variable included
in df, or just a character. Default is "y".}

\item{model_to_use}{list of parameters result of the function all_svm_estimation
containing all the information necessiry for the prediction}

\item{fold}{number of the fold if the function is called in cross-validation.
Just for visualization purposes. Default is NULL}

\item{regressors_betas}{a vector containing the real betas (if known). Default
is NULL, i.e. we do not know the real regressors}

\item{trace}{2:visualize all the steps, 1:visualize just the result,
0:visualize nothing. Default is 1}

\item{c_function_of_covariates}{if TRUE, covYI is used to estimate the
cut-off point as function of the convariate information. If FALSE, the
covariate information is ignored. In this function is used only to define
if we have to print or not the result. If TRUE the final print of the result
is not done, since it should be done in covYI estimation. Default is FALSE}
}
\value{
a list containing the prediction using the SVM methods and the value
of the main accuracy measure.
}
\description{
function to apply the prediction new data using the estimated
betas coming from the all_svm_estimation function using the Penalized SVM
methods.
}
\examples{
library(pye)
cols <- 2000
cols_cov <- 20
seed=1
simMicroarrayData_cov02_dim50_covariates <- create_sample_with_covariates(
		rows_train=50, cols=cols, cols_cov=cols_cov, covar=0.2, seed=seed)
train_df <- simMicroarrayData_cov02_dim50_covariates$train_df_scaled
test_df <- simMicroarrayData_cov02_dim50_covariates$test_df_scaled
X <- simMicroarrayData_cov02_dim50_covariates$X
y <- simMicroarrayData_cov02_dim50_covariates$y
regressors_betas<-simMicroarrayData_cov02_dim50_covariates$nregressors
lambda <- 0.1
c_function_of_covariates <- FALSE
model_type <- "SCADSVM"

model <- all_svm_estimation(df=train_df, X=X, y=y, lambda1=lambda,
	regressors_betas=regressors_betas, model_type=model_type,
		trace=1)

predictions <- all_svm_predict(df=test_df, X=X, model_to_use = model,
	trace=1, regressors_betas = regressors_betas,
	c_function_of_covariates=c_function_of_covariates)

print(predictions)

}
