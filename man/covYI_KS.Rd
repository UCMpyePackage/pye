% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/covYI_kernel_smoothing_function.R
\name{covYI_KS}
\alias{covYI_KS}
\title{covYI_KS}
\usage{
covYI_KS(
  df,
  z = "z_hat",
  y = "y",
  C,
  gammas,
  tau,
  kernel = "gaussian",
  alpha = 0.5,
  a1 = 3.7,
  a2 = 3,
  penalty = "L1",
  h_exponent = 0.2,
  prediction = FALSE,
  run_aauc = FALSE
)
}
\arguments{
\item{df}{the input dataset}

\item{z}{a single or a known combination of regressors. It can be of type
dataframe, containing also the same name of the same target variable included
in df, or just a character. Default is "z_hat"}

\item{y}{the target variable. It can be only binomial 0,1. It can be of type
dataframe, containing also the same name of the same target variable included
in df, or just a character. Default is "y".}

\item{C}{covariate variables. It can be of type dataframe, containing the
same covariates included in df, or just a vector of character. Default is NULL}

\item{gammas}{the coefficients of the covariates combination used for the
evaluation of the cut-point c (the first element is the constant!!)}

\item{tau}{the penalization parameter of the covariates C, in covYI. Default 0,
i.e. no penalization term}

\item{kernel}{the kernel type to use for the estimation of the density
function (tested only for "gaussian").  Default is "gaussian"}

\item{alpha}{parameter for the Elastic-Net penalization term. Default is 0.5}

\item{a1}{parameter for the SCAD and MCP penalization term. Default is 3.7}

\item{a2}{parameter for the MCP penalization term. Default is 3.0}

\item{penalty}{the considered penalty. To be chosen among L12, L1, EN, SCAD
and MCP. Default is "L1"}

\item{h_exponent}{parameter of the bandwidth of the Kernel Smooth}

\item{prediction}{if TRUE the empirical maximum Youden index is returned as
Youden index performance measure}

\item{run_aauc}{if FALSE the aAUC and aYI are not computed, to save stimation
time if not requested. Default is FALSE}
}
\value{
a list containing the value of PYE for the given penalty, the value
of the main accuracy measure and the gradient of PYE computer the the given
point.
}
\description{
The Penalizad Youden Index (PYE) function based on the Kernel
Smooth density estimator. It not only performs value of PYE but it returns
all the necessary for the estimation process, like measure of fit and
derivatives. It works for all the considered penalties (L12, L1,
EN, SCAD and MCP)
}
\details{
create the output class of covYI
}
\examples{
library(pye)
cols <- 2000
cols_cov <- 20
seed=1
simMicroarrayData_cov02_dim50_covariates <- create_sample_with_covariates(
		rows_train=50, cols=cols, cols_cov=cols_cov, covar=0.2, seed=seed)
df <- simMicroarrayData_cov02_dim50_covariates$train_df_scaled
X <- simMicroarrayData_cov02_dim50_covariates$X
y <- simMicroarrayData_cov02_dim50_covariates$y
C <- simMicroarrayData_cov02_dim50_covariates$C
#The combination of biomarkers (regressors) is known when we apply covYI
z <- simMicroarrayData_cov02_dim50_covariates$z
colnames(z) <- "z"
df1 <- transform(merge(x = df, y = z, by = 0, all.x = TRUE),
  row.names=Row.names, Row.names=NULL)
penalty <- "L12"
tau <- 0.1
gammas <- rep(1, length(C))
c <- 0
prox_penalty = get(paste0("proximal_operator_", penalty))

PYE_result <- covYI_KS(df=df1, z="z", y=y, C=C, gammas=gammas, tau=tau,
  alpha=0.5, a1=3.7, a2=3, penalty=penalty)
print(PYE_result)

}
