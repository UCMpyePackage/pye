% Generated by roxygen2: do not edit by hand
% Please edit documentation in
%   R/longpye_kernel_smoothing_with_covariates_diff_betas.R
\name{longpye_KS_estimation}
\alias{longpye_KS_estimation}
\title{longpye_KS_estimation}
\usage{
longpye_KS_estimation(
  df,
  id = "id",
  X = names(df[, !(names(df) \%in\% c(y, id, t))]),
  y = "y",
  t = "t",
  lambda,
  penalty = "L1",
  beta_start_input = NULL,
  beta_start_default = NULL,
  max.print = 20,
  alpha = 0.5,
  a1 = 3.7,
  a2 = 3,
  regressors_betas = NULL,
  fold = NULL,
  max_iter = 10,
  trend = "monotone",
  delta = 1e-05,
  max_alpha = 10000,
  stepsizeShrink = 0.5,
  min_alpha = 1e-07,
  convergence_error = 1e-07,
  trace = 1,
  seed = 1,
  c_zero_fixed = FALSE,
  kernel = "gaussian"
)
}
\arguments{
\item{df}{the input dataset}

\item{X}{regressors to consider in the estimation. It can be of type
dataframe, containing also the same name of the regressors included in df,
of just a vector of character. Default is all not present in y}

\item{y}{the target variable. It can be only binomial 0,1. It can be of type
dataframe, containing also the same name of the same target variable included
in df, or just a character. Default is "y".}

\item{lambda}{the penalization parameter of the regressors X}

\item{penalty}{the considered penalty. To be chosen among L12, L1, EN, SCAD
and MCP. Default is "L1"}

\item{beta_start_input}{vector of a specific starting point for betas.
Default is NULL, i.e. no input vector}

\item{beta_start_default}{set the default starting point of betas. If
"zeros", it starts with a vector of all zeros, if "corr" it starts with the
value of the correlation of every regressor with the target variable y.
Default is "zeros"}

\item{max.print}{number of elements to show if printing the results. Default
is 10}

\item{alpha}{parameter for the Elastic-Net penalization term. Default is 0.5}

\item{a1}{parameter for the SCAD and MCP penalization term. Default is 3.7}

\item{a2}{parameter for the MCP penalization term. Default is 3.0}

\item{regressors_betas}{a vector containing the real betas (if known). Default
is NULL, i.e. we do not know the real regressors}

\item{fold}{number of the fold if the function is called in cross-validation.
Just for visualization purposes. Default is NULL}

\item{max_iter}{maximum number of iterations in the algorithms mmAPG and
mnmAPG. Default is 10000}

\item{trend}{if "monotone", mmAPG is used, if "nonmonotone", mnmAPG is used.
Default is "monotone"}

\item{delta}{parameter for the convergence condition of the optimization
algorithm. Default is 1e-5}

\item{max_alpha}{maximum value of the step-parameter alpha. Default is 1000}

\item{stepsizeShrink}{parameter to adjust the step-size in the backtracking
line-search, in the optimization of pye. Taking values between 0 and 1,
the closer to 1, the more accurate the estimation will be, the longer it
will take and viceversa. Default is 0.8}

\item{min_alpha}{minimum value of the step-parameter alpha. Default is 1e-12}

\item{convergence_error}{error to accept for considering the algorithm
converged. Default is 1e-5}

\item{trace}{2:visualize all the steps, 1:visualize just the result,
0:visualize nothing. Default is 1}

\item{seed}{fix the seed. Default is 1}

\item{c_zero_fixed}{if TRUE the estimation process considers c, the cut-off
point, as fixed and equal to zero, to reduce the complexity of the estimation.
If FALSE c can vary and be different from zero, estimated by pye. Default
is FALSE}

\item{kernel}{the kernel type to use for the estimation of the density
function (tested only for "gaussian").  Default is "gaussian"}
}
\value{
a list containing the optimal value of betas and c, the value
of the main accuracy measure.
}
\description{
function to estimate the optimal value of betas and c maximizing
the PYE function. To find the optimum the mmAPG and mnmAPG algorithms are
used.
}
\examples{
library(pye)
cols <- 2000
cols_cov <- 20
seed=1
simMicroarrayData_cov02_dim50_covariates <- create_sample_with_covariates(
		rows_train=50, cols=cols, cols_cov=cols_cov, covar=0.2, seed=seed)
df <- simMicroarrayData_cov02_dim50_covariates$train_df_scaled
X <- simMicroarrayData_cov02_dim50_covariates$X
y <- simMicroarrayData_cov02_dim50_covariates$y
C <- simMicroarrayData_cov02_dim50_covariates$C
regressors_betas<-simMicroarrayData_cov02_dim50_covariates$nregressors
penalty <- "SCAD"
lambda <- 0.1
c <- 0
prox_penalty <- get(paste0("proximal_operator_", penalty))
trend <- "monotone" #or "nonmonotone"
beta_start_default <- "zeros"
alpha <- 0.5
c_zero_fixed <- FALSE

PYE_estimation_result <- pye_KS_estimation(df=df, X=X, y=y, penalty=penalty,
  trend = trend, trace=2, beta_start_default=beta_start_default,
  beta_start_input=NULL, lambda=lambda, alpha=alpha, a1=3.7, a2=3,
  regressors_betas=regressors_betas, c_zero_fixed=c_zero_fixed, max_iter=5)
print(PYE_estimation_result)

}
