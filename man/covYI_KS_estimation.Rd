% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/covYI_kernel_smoothing_function.R
\name{covYI_KS_estimation}
\alias{covYI_KS_estimation}
\title{covYI_KS_estimation}
\usage{
covYI_KS_estimation(
  df,
  z = "z_hat",
  y = "y",
  C,
  tau,
  penalty = "L1",
  gamma_start_input = NULL,
  gamma_start_default = "zeros",
  alpha = 0.5,
  a1 = 3.7,
  a2 = 3,
  regressors_gammas = NULL,
  fold = NULL,
  max_iter = 10000,
  max.print = 10,
  trend = "monotone",
  delta = 1e-05,
  max_alpha = 10000,
  stepsizeShrink = 0.8,
  min_alpha = 1e-10,
  convergence_error = 1e-07,
  trace = 1,
  seed = 1,
  kernel = "gaussian",
  run_aauc = FALSE
)
}
\arguments{
\item{df}{the input dataset}

\item{z}{a single or a known combination of regressors. It can be of type
dataframe, containing also the same name of the same target variable included
in df, or just a character. Default is "z_hat"}

\item{y}{the target variable. It can be only binomial 0,1. It can be of type
dataframe, containing also the same name of the same target variable included
in df, or just a character. Default is "y".}

\item{C}{covariate variables. It can be of type dataframe, containing the
same covariates included in df, or just a vector of character. Default is NULL}

\item{tau}{the penalization parameter of the covariates C, in covYI. Default 0,
i.e. no penalization term}

\item{penalty}{the considered penalty. To be chosen among L12, L1, EN, SCAD
and MCP. Default is "L1"}

\item{gamma_start_input}{vector of a specific starting point for gammas.
Default is NULL, i.e. no input vector}

\item{gamma_start_default}{set the default starting point of gamma.
If "zeros", it starts with all zero values, if "corr" it starts with the
value of the correlation of every regressor with the target variable. Default
is "zeros"}

\item{alpha}{parameter for the Elastic-Net penalization term. Default is 0.5}

\item{a1}{parameter for the SCAD and MCP penalization term. Default is 3.7}

\item{a2}{parameter for the MCP penalization term. Default is 3.0}

\item{regressors_gammas}{a vector containing the real gammas (if known).
Default is NULL}

\item{fold}{number of the fold if the function is called in cross-validation.
Just for visualization purposes. Default is NULL}

\item{max_iter}{maximum number of iterations in the algorithms mmAPG and
mnmAPG. Default is 10000}

\item{max.print}{number of elements to show if printing the results. Default
is 10}

\item{trend}{if "monotone", mmAPG is used, if "nonmonotone", mnmAPG is used.
Default is "monotone"}

\item{delta}{parameter for the convergence condition of the optimization
algorithm. Default is 1e-5}

\item{max_alpha}{maximum value of the step-parameter alpha. Default is 1000}

\item{stepsizeShrink}{parameter to adjust the step-size in the backtracking
line-search, in the optimization of pye. Taking values between 0 and 1,
the closer to 1, the more accurate the estimation will be, the longer it
will take and viceversa. Default is 0.8}

\item{min_alpha}{minimum value of the step-parameter alpha. Default is 1e-12}

\item{convergence_error}{error to accept for considering the algorithm
converged. Default is 1e-5}

\item{trace}{2:visualize all the steps, 1:visualize just the result,
0:visualize nothing. Default is 1}

\item{seed}{fix the seed. Default is 1}

\item{kernel}{the kernel type to use for the estimation of the density
function (tested only for "gaussian").  Default is "gaussian"}

\item{run_aauc}{if FALSE the aAUC and aYI are not computed, to save stimation
time if not requested. Default is FALSE}
}
\value{
a list containing the optimal value of gammas, the value
of the main accuracy measure.
}
\description{
function to estimate the optimal value of gammas and c maximizing
the PYE function. To find the optimum the mmAPG and mnmAPG algorithms are
used.
}
\examples{
library(pye)
cols <- 2000
cols_cov <- 20
seed=1
simMicroarrayData_cov02_dim50_covariates <- create_sample_with_covariates(
		rows_train=50, cols=cols, cols_cov=cols_cov, covar=0.2, seed=seed)
df <- simMicroarrayData_cov02_dim50_covariates$train_df_scaled
X <- simMicroarrayData_cov02_dim50_covariates$X
y <- simMicroarrayData_cov02_dim50_covariates$y
C <- simMicroarrayData_cov02_dim50_covariates$C
regressors_gammas<-simMicroarrayData_cov02_dim50_covariates$ncovariates
#The combination of biomarkers (regressors) is known when we apply covYI
z <- simMicroarrayData_cov02_dim50_covariates$z
colnames(z) <- "z"
df1 <- transform(merge(x = df, y = z, by = 0, all.x = TRUE),
  row.names=Row.names, Row.names=NULL)
penalty <- "SCAD"
tau <- 0.1
betas <- rep(1, length(X))
c <- 0
prox_penalty <- get(paste0("proximal_operator_", penalty))
gamma_start_default <- "zeros"
alpha <- 0.5

covYI_estimation_result <- covYI_KS_estimation(df=df1, z="z", y=y, C=C, tau=tau,
  penalty=penalty, trace=2, gamma_start_default=gamma_start_default,
  gamma_start_input=NULL, alpha=alpha, regressors_gammas=regressors_gammas,
  max_iter=5, run_aauc=TRUE)
print(covYI_estimation_result)

}
