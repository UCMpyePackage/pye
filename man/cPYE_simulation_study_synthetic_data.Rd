% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cPYE_simulation_study.R
\name{cPYE_simulation_study_synthetic_data}
\alias{cPYE_simulation_study_synthetic_data}
\title{cPYE_simulation_study_synthetic_data}
\usage{
cPYE_simulation_study_synthetic_data(
  n = 1000,
  rows_train = 50,
  rows_test = 1000,
  cols = 2000,
  cols_cov = 20,
  covar = 0.5,
  mu = rep(0, cols),
  mu_cov = rep(0, cols_cov),
  lambda,
  tau,
  beta_start_input = NULL,
  beta_start_default = "zeros",
  gamma_start_input = NULL,
  gamma_start_default = "zeros",
  trace = 1,
  alpha,
  a1 = 3.7,
  a2 = 3,
  penalty = "L1",
  max_iter = 10000,
  trend = "monotone",
  delta = 1e-05,
  max_alpha = 10000,
  stepsizeShrink = 0.8,
  min_alpha = 1e-10,
  convergence_error = 1e-07,
  kernel = "gaussian",
  used_cores = 1,
  run_aauc = FALSE
)
}
\arguments{
\item{n}{number of esperiments. Default is 1000}

\item{rows_train}{number of rows of the training sample. Default is 50,
for an high-dimensional setting}

\item{rows_test}{number of rows of the test sample. Default is 1000.
We suggest to create a test sample much bigger than the training sample
to test your method/model on more data}

\item{cols}{number of regressor variables of both the training and the 
test samples. Default is 2000, for an high-dimensional setting}

\item{cols_cov}{number of covariate variables of both the training and the 
test samples. Default is 20, increase it for an high-dimensional setting}

\item{covar}{covariance in the covariace matrix of the normal distribution.
Increasing it, the created features are more correlated. Default is 0.5}

\item{mu}{mean of the (multivariate) normal distribution of the regressors. 
Default is 0}

\item{mu_cov}{mean of the (multivariate) normal distribution of the 
covariates. Default is 0}

\item{lambda}{the penalization parameter of the regressors X}

\item{tau}{the penalization parameter of the covariates C, in covYI. Default 0,
i.e. no penalization term}

\item{beta_start_input}{vector of a specific starting point for betas.
Default is NULL, i.e. no input vector}

\item{beta_start_default}{set the default starting point of betas. If
"zeros", it starts with a vector of all zeros, if "corr" it starts with the
value of the correlation of every regressor with the target variable y.
Default is "zeros"}

\item{gamma_start_input}{vector of a specific starting point for gammas.
Default is NULL, i.e. no input vector}

\item{gamma_start_default}{set the default starting point of gamma.
If "zeros", it starts with all zero values, if "corr" it starts with the
value of the correlation of every regressor with the target variable. Default
is "zeros"}

\item{trace}{2:visualize all the steps, 1:visualize just the result,
0:visualize nothing. Default is 1}

\item{alpha}{parameter for the Elastic-Net penalization term. Default is 0.5}

\item{a1}{parameter for the SCAD and MCP penalization term. Default is 3.7}

\item{a2}{parameter for the MCP penalization term. Default is 3.0}

\item{penalty}{the considered penalty. To be chosen among L12, L1, EN, SCAD
and MCP. Default is "L1"}

\item{max_iter}{maximum number of iterations in the algorithms mmAPG and
mnmAPG. Default is 500}

\item{trend}{if "monotone", mmAPG is used, if "nonmonotone", mnmAPG is used.
Default is "monotone"}

\item{delta}{parameter for the convergence condition of the optimization
algorithm. Default is 1e-5}

\item{max_alpha}{maximum value of the step-parameter alpha. Default is 1000}

\item{stepsizeShrink}{parameter to adjust the step-size in the backtracking
line-search, in the optimization of pye. Taking values between 0 and 1,
the closer to 1, the more accurate the estimation will be, the longer it
will take and viceversa. Default is 0.8}

\item{min_alpha}{minimum value of the step-parameter alpha. Default is 1e-12}

\item{convergence_error}{error to accept for considering the algorithm
converged. Default is 1e-5}

\item{kernel}{the kernel type to use for the estimation of the density
function (tested only for "gaussian").  Default is "gaussian"}

\item{used_cores}{number of core used for the parallelization of the
process. if equal to 1, then no parallelization is adopted. Default is 1.}

\item{run_aauc}{if FALSE the aAUC and aYI are not computed, to save stimation
time if not requested. Default is FALSE}
}
\value{
a list containing the classification measure related to every simulation.
}
\description{
function to perform the simulation on n different 
experiments, for all the considered penalties of cPYE for simulated data.
In every iteration we start creating a new synthetic dataset and 
then we randomly split it in train and test, estimating pye in the 
train and evaluating the classification measures on the test set.
}
\examples{
library(pye)
rows_train <- 50
rows_test <- 1000 
cols <- 2000
cols_cov <- 20
covar <- 0.5
mu <- rep(0,cols)
mu_cov <- rep(0,cols_cov)
pye_starting_point <- "zeros" #c("zeros", "corr")
alpha <- 0.5
used_cores <- 1
used_penalty_pye <- c("L1") #c("L12", "L1", "EN", "SCAD", "MCP")
measures_pye <- c("ccr") #c("auc", "aauc", "aYI", "ccr", "yi", "gm", "pye")
n <- 5 #number of simulations
trend <- "monotone" #or "nonmonotone"
max_iter <- 10

cat("This simulation is on with algorithm: ", trend, "\n")

#--------------------------------------------------------------------------
#                                  START                                  |
#--------------------------------------------------------------------------
#pye Gaussian Kernel Smooth + covYI
for (p in used_penalty_pye){
  for (mm in 1:length(measures_pye)){
    cat("---> Starting with measure", measures_pye[mm], ", for the penalty", p, "<---\n")
    name <- paste0("cPYE_KS_covYI_", p ,"_sim_study_", measures_pye[mm])
    lambda_to_use <- 0.1
    tau_to_use <- 0.05
    assign(name, cPYE_simulation_study_synthetic_data(n=n, rows_train=rows_train, 
						rows_test=rows_test,  cols=cols, 
						cols_cov=cols_cov, covar=covar, 
						mu=mu, mu_cov=mu_cov,
                         lambda=lambda_to_use, 
                         tau=tau_to_use, 
                         trend=trend,
                         beta_start_default=pye_starting_point,
                         gamma_start_default=pye_starting_point,
                         trace=1,
                         alpha=alpha,
                         a1=3.7, a2=3.7,
                         penalty=p,
                         kernel="gaussian",
						max_iter=max_iter,
						used_cores=used_cores,
							run_aauc=FALSE))
  }
} 
cat("Computation finished! Start saving data.")
print(name)

}
